{"version":3,"sources":["../../src/js/index.js"],"names":["PubSub","events","event","callback","console","error","undefined","listeners","push","filter","listener","toString","data","forEach"],"mappings":";;;;;;;;;;;;;;;AAAA;;;IAIMA,M;;;AACJ,oBAAc;AAAA;;AACZ,SAAKC,MAAL,GAAc,EAAd;AACD;AAED;;;;;;;;;8BAKUC,K,EAAOC,Q,EAAU;AACzB;AACA,UAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClCC,QAAAA,OAAO,CAACC,KAAR,+EAAoFF,QAApF;AACA,eAAO,KAAP;AACD,OALwB,CAOzB;;;AACA,UAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7BE,QAAAA,OAAO,CAACC,KAAR,sEAA2EH,KAA3E;AACA,eAAO,KAAP;AACD,OAXwB,CAazB;;;AACA,UAAI,KAAKD,MAAL,CAAYC,KAAZ,MAAuBI,SAA3B,EAAsC;AACpC,aAAKL,MAAL,CAAYC,KAAZ,IAAqB;AACnBK,UAAAA,SAAS,EAAE;AADQ,SAArB;AAGD,OAlBwB,CAmBzB;;;AACA,WAAKN,MAAL,CAAYC,KAAZ,EAAmBK,SAAnB,CAA6BC,IAA7B,CAAkCL,QAAlC;AACD;AAED;;;;;;;;gCAKYD,K,EAAOC,Q,EAAU;AAC3B;AACA,UAAI,KAAKF,MAAL,CAAYC,KAAZ,MAAuBI,SAA3B,EAAsC;AACpCF,QAAAA,OAAO,CAACC,KAAR,uBAA6BH,KAA7B;AACA,eAAO,KAAP;AACD;;AAED,WAAKD,MAAL,CAAYC,KAAZ,EAAmBK,SAAnB,GAA+B,KAAKN,MAAL,CAAYC,KAAZ,EAAmBK,SAAnB,CAA6BE,MAA7B,CAAoC,UAAAC,QAAQ;AAAA,eAAIA,QAAQ,CAACC,QAAT,OAAwBR,QAAQ,CAACQ,QAAT,EAA5B;AAAA,OAA5C,CAA/B;AACD;AAED;;;;;;;;4BAKQT,K,EAAkB;AAAA,UAAXU,IAAW,uEAAJ,EAAI;;AACxB;AACA,UAAI,KAAKX,MAAL,CAAYC,KAAZ,MAAuBI,SAA3B,EAAsC;AACpCF,QAAAA,OAAO,CAACC,KAAR,uBAA6BH,KAA7B;AACA,eAAO,KAAP;AACD,OALuB,CAMxB;;;AACA,WAAKD,MAAL,CAAYC,KAAZ,EAAmBK,SAAnB,CAA6BM,OAA7B,CAAqC,UAAAH,QAAQ;AAAA,eAAIA,QAAQ,CAACE,IAAD,CAAZ;AAAA,OAA7C;AACD;;;;;;eAGYZ,M","sourcesContent":["/**\r\n * Simple pubsub implementation using JavaScript\r\n */\r\n\r\nclass PubSub {\r\n  constructor() {\r\n    this.events = {};\r\n  }\r\n\r\n  /**\r\n   * @param {string} event\r\n   * @param {function} callback\r\n   * @memberof PubSub\r\n   */\r\n  subscribe(event, callback) {\r\n    // Check if the callback is not a function\r\n    if (typeof callback !== 'function') {\r\n      console.error(`The listener callback must be a function, the given type is ${typeof callback}`);\r\n      return false;\r\n    }\r\n\r\n    // Check if the event is not a string\r\n    if (typeof event !== 'string') {\r\n      console.error(`The event name must be a string, the given type is ${typeof event}`);\r\n      return false;\r\n    }\r\n\r\n    // Check if this event not exists\r\n    if (this.events[event] === undefined) {\r\n      this.events[event] = {\r\n        listeners: []\r\n      };\r\n    }\r\n    // We know we've got an array for this event, so push our callback in there with no fuss\r\n    this.events[event].listeners.push(callback);\r\n  }\r\n\r\n  /**\r\n   * @param {string} event\r\n   * @param {function} callback\r\n   * @memberof PubSub\r\n   */\r\n  unsubscribe(event, callback) {\r\n    // Check if this event not exists\r\n    if (this.events[event] === undefined) {\r\n      console.error(`This event: ${event} does not exist`);\r\n      return false;\r\n    }\r\n\r\n    this.events[event].listeners = this.events[event].listeners.filter(listener => listener.toString() !== callback.toString());\r\n  }\r\n\r\n  /**\r\n   * @param {string} event\r\n   * @param {object} [data={}]\r\n   * @memberof PubSub\r\n   */\r\n  publish(event, data = {}) {\r\n    // Check if this event not exists\r\n    if (this.events[event] === undefined) {\r\n      console.error(`This event: ${event} does not exist`);\r\n      return false;\r\n    }\r\n    // Get each subscription and call its callback with the passed data\r\n    this.events[event].listeners.forEach(listener => listener(data));\r\n  }\r\n}\r\n\r\nexport default PubSub;\r\n"],"file":"index.js"}