{"version":3,"sources":["../../src/js/index.js"],"names":["PubSub","events","event","callback","console","error","undefined","listeners","push","onceCallback","unsubscribe","apply","arguments","bind","subscribe","filteredSubscribtion","i","length","toString","data"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;;;IAMMA,M;;;AACJ,oBAAc;AAAA;;AACZ;;;;AAIA,SAAKC,MAAL,GAAc,EAAd;AACD;AAED;;;;;;;;;;8BAMUC,K,EAAOC,Q,EAAU;AACzB;AACA,UAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClCC,QAAAA,OAAO,CAACC,KAAR,gGAAoFF,QAApF;AACA,eAAO,KAAP;AACD,OALwB,CAOzB;;;AACA,UAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7BE,QAAAA,OAAO,CAACC,KAAR,uFAA2EH,KAA3E;AACA,eAAO,KAAP;AACD,OAXwB,CAazB;;;AACA,UAAI,KAAKD,MAAL,CAAYC,KAAZ,MAAuBI,SAA3B,EAAsC;AACpC,aAAKL,MAAL,CAAYC,KAAZ,IAAqB;AACnBK,UAAAA,SAAS,EAAE;AADQ,SAArB;AAGD,OAlBwB,CAmBzB;;;AACA,WAAKN,MAAL,CAAYC,KAAZ,EAAmBK,SAAnB,CAA6BC,IAA7B,CAAkCL,QAAlC;AACD;AAED;;;;;;;;;;kCAOcD,K,EAAOC,Q,EAAU;AAC7B,UAAMM,YAAY,GAAI,YAAW;AAC/B,aAAKC,WAAL,CAAiBR,KAAjB,EAAwBO,YAAxB;AACAN,QAAAA,QAAQ,CAACQ,KAAT,CAAe,IAAf,EAAqBC,SAArB;AACD,OAHoB,CAGlBC,IAHkB,CAGb,IAHa,CAArB;;AAKA,WAAKC,SAAL,CAAeZ,KAAf,EAAsBO,YAAtB;AACD;AAED;;;;;;;;;gCAMYP,K,EAAOC,Q,EAAU;AAC3B;AACA,UAAI,KAAKF,MAAL,CAAYC,KAAZ,MAAuBI,SAA3B,EAAsC;AACpCF,QAAAA,OAAO,CAACC,KAAR,uBAA6BH,KAA7B;AACA,eAAO,KAAP;AACD;;AAED,UAAMa,oBAAoB,GAAG,EAA7B;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKf,MAAL,CAAYC,KAAZ,EAAmBK,SAAnB,CAA6BU,MAAjD,EAAyDD,CAAC,IAAI,CAA9D,EAAiE;AAC/D,YAAI,KAAKf,MAAL,CAAYC,KAAZ,EAAmBK,SAAnB,CAA6BS,CAA7B,EAAgCE,QAAhC,OAA+Cf,QAAQ,CAACe,QAAT,EAAnD,EAAwE;AACtEH,UAAAA,oBAAoB,CAACP,IAArB,CAA0B,KAAKP,MAAL,CAAYC,KAAZ,EAAmBK,SAAnB,CAA6BS,CAA7B,CAA1B;AACD;AACF;;AACD,WAAKf,MAAL,CAAYC,KAAZ,EAAmBK,SAAnB,GAA+BQ,oBAA/B;AACD;AAED;;;;;;mCAGe;AACb,WAAKd,MAAL,GAAc,EAAd;AACD;AAED;;;;;;;;;4BAMQC,K,EAAkB;AAAA,UAAXiB,IAAW,uEAAJ,EAAI;;AACxB;AACA,UAAI,KAAKlB,MAAL,CAAYC,KAAZ,MAAuBI,SAA3B,EAAsC;AACpCF,QAAAA,OAAO,CAACC,KAAR,uBAA6BH,KAA7B;AACA,eAAO,KAAP;AACD,OALuB,CAMxB;;;AACA,WAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKf,MAAL,CAAYC,KAAZ,EAAmBK,SAAnB,CAA6BU,MAAjD,EAAyDD,CAAC,IAAI,CAA9D,EAAiE;AAC/D,aAAKf,MAAL,CAAYC,KAAZ,EAAmBK,SAAnB,CAA6BS,CAA7B,EAAgCG,IAAhC;AACD;AACF;;;;;eAGYnB,M","sourcesContent":["/**\r\n * Pubsub is simple pubsub implementation using JavaScript\r\n * @class\r\n * @constructor\r\n * @public\r\n */\r\nclass PubSub {\r\n  constructor() {\r\n    /**\r\n     *  Init object events\r\n     * @type {Object}\r\n     */\r\n    this.events = {};\r\n  }\r\n\r\n  /**\r\n   * Listen to an event.\r\n   *\r\n   * @param {string} event - event names to bind to\r\n   * @param {function} callback - action that will be executed when even is fired.\r\n   */\r\n  subscribe(event, callback) {\r\n    // Check if the callback is not a function\r\n    if (typeof callback !== 'function') {\r\n      console.error(`The listener callback must be a function, the given type is ${typeof callback}`);\r\n      return false;\r\n    }\r\n\r\n    // Check if the event is not a string\r\n    if (typeof event !== 'string') {\r\n      console.error(`The event name must be a string, the given type is ${typeof event}`);\r\n      return false;\r\n    }\r\n\r\n    // Check if this event not exists\r\n    if (this.events[event] === undefined) {\r\n      this.events[event] = {\r\n        listeners: []\r\n      };\r\n    }\r\n    // We know we've got an array for this event, so push our callback in there with no fuss\r\n    this.events[event].listeners.push(callback);\r\n  }\r\n\r\n  /**\r\n   * Attach a callback to an name, but once only. Will disapear after first execution.\r\n   *\r\n   * @param {string} event - event names to bind to\r\n   * @param {Function} callback - Action that will be executed when even is fired.\r\n   * @see https://gist.github.com/jashmenn/b306add36d3e6f0f6483\r\n   */\r\n  subscribeOnce(event, callback) {\r\n    const onceCallback = (function() {\r\n      this.unsubscribe(event, onceCallback);\r\n      callback.apply(this, arguments);\r\n    }).bind(this);\r\n\r\n    this.subscribe(event, onceCallback);\r\n  }\r\n\r\n  /**\r\n   * Remove a specific listener to an event.\r\n   *\r\n   * @param {string} event - event names to bind to\r\n   * @param {function} callback - Action that will be executed when even is fired.\r\n   */\r\n  unsubscribe(event, callback) {\r\n    // Check if this event not exists\r\n    if (this.events[event] === undefined) {\r\n      console.error(`This event: ${event} does not exist`);\r\n      return false;\r\n    }\r\n\r\n    const filteredSubscribtion = [];\r\n    for (let i = 0; i < this.events[event].listeners.length; i += 1) {\r\n      if (this.events[event].listeners[i].toString() !== callback.toString()) {\r\n        filteredSubscribtion.push(this.events[event].listeners[i]);\r\n      }\r\n    }\r\n    this.events[event].listeners = filteredSubscribtion;\r\n  }\r\n\r\n  /**\r\n   * Removes all the subscriptions\r\n   */\r\n  unsubscribes() {\r\n    this.events = {};\r\n  }\r\n\r\n  /**\r\n   * Notify subscriptions by calling their name\r\n   *\r\n   * @param {string} event - event to fire\r\n   * @param {object} [data={}] - params to distribute to the callbacks\r\n   */\r\n  publish(event, data = {}) {\r\n    // Check if this event not exists\r\n    if (this.events[event] === undefined) {\r\n      console.error(`This event: ${event} does not exist`);\r\n      return false;\r\n    }\r\n    // Get each subscription and call its callback with the passed data\r\n    for (let i = 0; i < this.events[event].listeners.length; i += 1) {\r\n      this.events[event].listeners[i](data);\r\n    }\r\n  }\r\n}\r\n\r\nexport default PubSub;\r\n"],"file":"index.js"}